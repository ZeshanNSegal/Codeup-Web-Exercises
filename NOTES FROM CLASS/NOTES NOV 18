<?php

class Person
{
	public $firstName;
	public $lastName;

	public static $population = 7241000000;

	public function test()
	{
		return 'test';
	} 

	public static function sayHello()
	{
		return 'Hello World';
	}
}

echo Person::$population . PHP_EOL;

$john = new Person;
echo $john->sayHello();

you call static prop and meths with the ::

class Person
{
	public $firstName;
	public $lastName;

	public static $population = 7200000000;

	public static function getScientificName()
	{
		return 'Homo sapien';
	}
}

echo Person::getScientificName() . PHP_EOL;

SELF KEYWORD:

class Person
{
    public $firstName;
    public $lastName;

    public static $population = 7200000000;

    public static function birth()
    {
        self::$population += 1;
    }
}

Person::birth();
echo Person::$population

self is like this in class

use self with only static properties
self only goes inside methods. 

we can make global functions that exists outside of classes and pbjects, but its the wrong answer unless there is a specific use case. for the most part all functions should exist inside objects and classes

helper functions are wrappers for static methods

the functions are aliases for placeholders. 

methods and static methods depended on how you want the calling card to work
and how you want things to be shared amongst your different resources. 

80% of ben's code is traditional method. inside an instance of an object. 

static methods are not as frequent. 

more often than not you are going to have an object, and you are going to call an object on that specific instance. 

if you have a variable, that you want to track on a per object basis, models represent a single record in the DB. The data is going to be tied intoa single instance. 

most of these will not be static. 

When static they are shared amongst the entire class. 

if one method changes a class it changes all instances. 

firstName is tied to one instance of $person for example. 

not shared amongst other classes. 

shared among other prop or function that is static. 


