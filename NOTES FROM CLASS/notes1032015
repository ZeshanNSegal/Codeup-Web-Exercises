Extra notes: <!-- According to the HTML5 specification, the following elements are "void elements":

		area, base, br, col, embed, hr, img, input, keygen, link, meta, param, source, track, wbr  -->
		

		<!--From the above list, we will be covering:

		br - line breaks
		img - images
		input - form inputs
		meta - metadata -->


"GET" Method

HTTP GET's are used to request information, without making any changes to data on the server. When a form's method is set to GET, any of the data that the form sends will be appended to the url.

"POST" Method

HTTP POST's are used to make a change to existing data on the server. When a form's method is set to POST, any of the data that the form sends will not be added to the url, but will instead be embedded in the body of the HTTP request as key-value pairs. If you have ever been asked a question like, "Are you sure you want to re-submit this form?", then you were probably refreshing a page after submitting an HTTP POST.

Form Action

The action attribute of an HTML form refers to the location that the form data should be sent. This will generally be a PHP (or other back-end language) file on the web server that can read the inputs and perform some action based on them. If no action is specified, by default, the action will be set to send data back to the current url.

Query String

A query string is composed of key-value pairs. It begins with a question mark (?). Following the question mark, is the first key-value pair. Key-value pairs are structured as key=value. Key-value pairs after the first will be separated by ampersands (&).

Here is an example:

?key1=value1&key2=value2&key3=value3

Whenever you use the GET method in an HTML form, the form inputs will be appended to the url in the format shown above. If you are using a POST method in an HTML form, the inputs will be sent as a query string (this time without the preceding question mark) in the body of the HTTP request.

textarea and inputs... what are they in html, and when do I use them? 

label and input are used together in forms... see below... 

Input Labeling

To label form inputs, the <label> element is used. You may have noticed the labels in the example in the previous lesson. Form labels should be defined along with a for attribute that points to the id of the <input> that the label is for. Here is an example of the proper use of a form label:

<label for="username">Username:</label>
<input type="text" id="username" name="username">


I STOPPED STUDYING AT CSS DECENDANT SELECTORS

I think I may have messed up some of my original files I downloaded the first time....****How do I check?


CSS selectors work like this: 

selector{
	some_property1:value;
	some_property2:value;

}

ex would look like this:

.paragraph2 {
	color:red;
	text-decoration:none;
}

two selectors together:

.p3, .p4 {
	color:orange;
	font-size:12px;
}









